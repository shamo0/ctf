#!/usr/bin/env python3 

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def int_to_bytes(x: int) -> bytes:
    return x.to_bytes((x.bit_length() + 7) // 8, 'big')

def main():

    p = 217552764058787997567493034607044283377496539858879497727049636543356131232276668908244520324893596091422415221369724903633644903550669849758531259022092213931129084601056854827788781598165696783448479481222945055460860967072885749553568269282036961815489175664508184338923333649026696625068946562505780500717
    q = 188490053101911323681210517998075674133365384217412200765893018654665812367816446202738395257469232869147589639943200398988803751488472493684274920315132128727018622858135377656719054384328850964429360560762266423270524382356582214406110526167080616055951029200102526335704505558795771965729586958286602743419
    e = 110745666316267341500632835540076669630940371471416089111440654200179907651381
    ct = 28709575675521356945232245242195633559875537675461366406707722230997918042099089096431656942852415066253463587976433962617001215443653752583181293220836859549895559890189778883346184287702771084724028574847071527188323049364859837332918968028911971734622719662933408008152153457266063916576599398503092422673531162288406567157512170151946980501208691485944773950700765497217551073910094278682456911214198412832006655865440265384984364625012053067171921783481416598988741514006856896480413363409320902164933586447009313460694256426551123365387128764026291177204843168778007884070871776640797124635236895621106208621204

    # compute n
    n = p * q

    # Compute phi(n)
    phi = (p - 1) * (q - 1)

    # Compute modular inverse of e
    gcd, a, b = egcd(e, phi)
    d = a

    print( "n:  " + str(d) );

    # Decrypt ciphertext
    pt = pow(ct, d, n)
    print( "pt: " + str(pt) )
    
    string = int_to_bytes(pt)

    print(string)
if __name__ == "__main__":
    main()
